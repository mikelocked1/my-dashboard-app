import jsPDF from 'jspdf';
import type { HealthData } from '@shared/schema';

interface ReportData {
  reportType: string;
  dateRange: {
    from: string;
    to: string;
  };
  healthData: HealthData[];
  patientName: string;
}

export const generateHealthReport = async (data: ReportData): Promise<void> => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  
  // Header
  doc.setFillColor(217, 119, 6); // Primary orange color
  doc.rect(0, 0, pageWidth, 30, 'F');
  
  // Logo and title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('SmartCare', 20, 20);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text('Intelligent Health Companion', 20, 25);
  
  // Patient info
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Health Report', 20, 50);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Patient: ${data.patientName}`, 20, 65);
  doc.text(`Report Type: ${getReportTypeName(data.reportType)}`, 20, 75);
  doc.text(`Period: ${data.dateRange.from} to ${data.dateRange.to}`, 20, 85);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 95);
  doc.text(`Total Data Points: ${data.healthData.length}`, 20, 105);
  
  // Separator line
  doc.setDrawColor(217, 119, 6);
  doc.setLineWidth(0.5);
  doc.line(20, 115, pageWidth - 20, 115);
  
  let yPos = 130;
  
  // Summary statistics
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Health Metrics Summary', 20, yPos);
  yPos += 15;
  
  const metrics = generateHealthMetrics(data.healthData);
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  Object.entries(metrics).forEach(([type, stats]) => {
    if (stats.count > 0) {
      doc.text(`${getMetricDisplayName(type)}:`, 25, yPos);
      doc.text(`Average: ${stats.average} ${stats.unit}`, 25, yPos + 10);
      doc.text(`Range: ${stats.min} - ${stats.max} ${stats.unit}`, 25, yPos + 20);
      doc.text(`Readings: ${stats.count}`, 25, yPos + 30);
      
      // Classification
      const classification = classifyMetric(type, stats.average);
      doc.setTextColor(getClassificationColor(classification));
      doc.text(`Status: ${classification.toUpperCase()}`, 25, yPos + 40);
      doc.setTextColor(0, 0, 0);
      
      yPos += 55;
      
      // Check if we need a new page
      if (yPos > pageHeight - 50) {
        doc.addPage();
        yPos = 30;
      }
    }
  });
  
  // Detailed readings table
  yPos += 10;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Detailed Readings', 20, yPos);
  yPos += 20;
  
  // Table headers
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.text('Date', 25, yPos);
  doc.text('Type', 65, yPos);
  doc.text('Value', 105, yPos);
  doc.text('Source', 140, yPos);
  doc.text('Notes', 170, yPos);
  
  // Table header line
  doc.line(20, yPos + 2, pageWidth - 20, yPos + 2);
  yPos += 10;
  
  doc.setFont('helvetica', 'normal');
  
  // Sort data by date (most recent first)
  const sortedData = data.healthData.sort((a, b) => 
    new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
  );
  
  sortedData.slice(0, 20).forEach((item) => { // Limit to 20 most recent
    const date = new Date(item.timestamp).toLocaleDateString();
    const type = getMetricDisplayName(item.type);
    const value = `${item.value} ${item.unit}`;
    const source = item.source.replace('_', ' ');
    const notes = item.notes?.substring(0, 15) || '-';
    
    doc.text(date, 25, yPos);
    doc.text(type, 65, yPos);
    doc.text(value, 105, yPos);
    doc.text(source, 140, yPos);
    doc.text(notes, 170, yPos);
    
    yPos += 8;
    
    // Check if we need a new page
    if (yPos > pageHeight - 30) {
      doc.addPage();
      yPos = 30;
    }
  });
  
  // Health recommendations
  if (yPos > pageHeight - 80) {
    doc.addPage();
    yPos = 30;
  }
  
  yPos += 20;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Health Recommendations', 20, yPos);
  yPos += 15;
  
  const recommendations = generateRecommendations(metrics);
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  recommendations.forEach((rec) => {
    doc.text(`â€¢ ${rec}`, 25, yPos);
    yPos += 12;
  });
  
  // Footer
  const footer = `Generated by SmartCare Health Platform | ${new Date().toLocaleDateString()}`;
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text(footer, pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  // Save the PDF
  const fileName = `health-report-${data.dateRange.from}-to-${data.dateRange.to}.pdf`;
  doc.save(fileName);
};

const generateHealthMetrics = (healthData: HealthData[]) => {
  const metrics: any = {};
  
  healthData.forEach((item) => {
    if (!metrics[item.type]) {
      metrics[item.type] = {
        values: [],
        unit: item.unit,
        count: 0
      };
    }
    
    const numericValue = parseFloat(item.value.split('/')[0]); // Handle blood pressure
    if (!isNaN(numericValue)) {
      metrics[item.type].values.push(numericValue);
      metrics[item.type].count++;
    }
  });
  
  // Calculate statistics
  Object.keys(metrics).forEach((type) => {
    const values = metrics[type].values;
    if (values.length > 0) {
      metrics[type].average = Math.round((values.reduce((a, b) => a + b, 0) / values.length) * 10) / 10;
      metrics[type].min = Math.min(...values);
      metrics[type].max = Math.max(...values);
    }
  });
  
  return metrics;
};

const getReportTypeName = (type: string): string => {
  switch (type) {
    case 'monthly_summary': return 'Monthly Health Summary';
    case 'trend_analysis': return 'Health Trend Analysis';
    case 'detailed_metrics': return 'Detailed Health Metrics';
    default: return 'Health Report';
  }
};

const getMetricDisplayName = (type: string): string => {
  switch (type) {
    case 'heart_rate': return 'Heart Rate';
    case 'blood_pressure': return 'Blood Pressure';
    case 'weight': return 'Weight';
    case 'blood_sugar': return 'Blood Sugar';
    case 'temperature': return 'Temperature';
    case 'steps': return 'Daily Steps';
    case 'sleep': return 'Sleep Duration';
    default: return type.replace('_', ' ');
  }
};

const classifyMetric = (type: string, value: number): string => {
  switch (type) {
    case 'heart_rate':
      if (value < 60 || value > 100) return 'abnormal';
      return 'normal';
    case 'blood_pressure':
      if (value > 140) return 'high';
      if (value < 90) return 'low';
      return 'normal';
    case 'temperature':
      if (value > 37.5 || value < 36) return 'abnormal';
      return 'normal';
    default:
      return 'normal';
  }
};

const getClassificationColor = (classification: string): number[] => {
  switch (classification) {
    case 'abnormal':
    case 'high':
    case 'low':
      return [220, 38, 38]; // Red
    default:
      return [5, 150, 105]; // Green
  }
};

const generateRecommendations = (metrics: any): string[] => {
  const recommendations: string[] = [];
  
  if (metrics.heart_rate && (metrics.heart_rate.average < 60 || metrics.heart_rate.average > 100)) {
    recommendations.push('Consult your doctor about your heart rate readings');
  }
  
  if (metrics.blood_pressure && metrics.blood_pressure.average > 140) {
    recommendations.push('Monitor blood pressure regularly and consider dietary changes');
  }
  
  if (metrics.steps && metrics.steps.average < 8000) {
    recommendations.push('Increase daily physical activity to reach 10,000 steps');
  }
  
  if (metrics.sleep && metrics.sleep.average < 7) {
    recommendations.push('Aim for 7-9 hours of quality sleep each night');
  }
  
  recommendations.push('Maintain regular check-ups with your healthcare provider');
  recommendations.push('Keep tracking your health data consistently');
  
  return recommendations;
};
